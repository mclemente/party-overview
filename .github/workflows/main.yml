name: Release Creation

env:
  package_type: module
  node_version: 22

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # Substitute the Manifest and Download URLs in the module.json
    - name: Substitute Manifest and Download Links For Versioned Ones
      id: sub_manifest_link_version
      uses: microsoft/variable-substitution@v1
      with:
        files: 'module.json'
      env:
        version: ${{github.event.release.tag_name}}
        manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
        download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

    # Create a zip file with all files required by the module to add to the release
    - run: zip -r ./module.zip party-overview.js LICENSE.txt module.json lang/ module/ style/ templates/

    # Create a release for this specific version
    - name: Update Release with Files
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true # Set this to false if you want to prevent updating existing releases
        name: ${{ github.event.release.name }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './module.json, ./module.zip'
        tag: ${{ github.event.release.tag_name }}
        body: ${{ github.event.release.body }}

    - name: Get Module ID
      id: moduleID
      uses: notiz-dev/github-action-json-property@release
      with:
        path: "./${{ env.package_type }}.json"
        prop_path: "id"

    - name: Get mininum
      id: minimum
      uses: notiz-dev/github-action-json-property@release
      with:
        path: "./${{ env.package_type }}.json"
        prop_path: "compatibility.minimum"

    - name: Get verified
      id: verified
      uses: notiz-dev/github-action-json-property@release
      with:
        path: "./${{ env.package_type }}.json"
        prop_path: "compatibility.verified"

    - name: Extract tag version number
      id: get_version
      uses: battila7/get-version-action@v2

    - name: Foundry Release API
      uses: fjogeleit/http-request-action@v1
      with:
        url: "https://api.foundryvtt.com/_api/packages/release_version"
        method: "POST"
        customHeaders: '{"Content-Type": "application/json", "Authorization" : "${{ secrets.FOUNDRY_KEY }}"}'
        data: '{"id": "${{ steps.moduleID.outputs.prop }}", "release": {"version": "${{ steps.get_version.outputs.version }}", "manifest": "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/${{ env.package_type }}.json", "notes": "https://github.com/${{ github.repository }}/releases/tag/${{ github.event.release.tag_name }}/", "compatibility" : {"minimum": "${{ steps.minimum.outputs.prop }}", "verified": "${{ steps.verified.outputs.prop }}"}}}'
        preventFailureOnNoResponse: true